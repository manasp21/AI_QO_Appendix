/**
 * Simple markdown parser
 */
(function() {
  const marked = {
    setOptions: function(options) {
      this.options = options || {};
      return this;
    },
    
    parse: function(markdown) {
      if (!markdown) return '';
      
      let html = markdown;
      
      // Code blocks
      html = html.replace(/```([\s\S]+?)```/g, function(match, code) {
        // Escape HTML in code blocks
        code = code.replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return '<pre><code>' + code + '</code></pre>';
      });
      
      // Headers
      html = html.replace(/^### (.*$)/gm, '<h3>$1</h3>');
      html = html.replace(/^## (.*$)/gm, '<h2>$1</h2>');
      html = html.replace(/^# (.*$)/gm, '<h1>$1</h1>');
      
      // Bold and italic
      html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
      html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
      
      // Inline code
      html = html.replace(/`([^`]+)`/g, function(match, code) {
        code = code.replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return '<code>' + code + '</code>';
      });
      
      // Links
      html = html.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2">$1</a>');
      
      // Convert new lines to breaks outside of code blocks
      const parts = [];
      let lastIndex = 0;
      
      // Split by code blocks
      const codeRegex = /<pre><code>[\s\S]+?<\/code><\/pre>/g;
      let match;
      
      while ((match = codeRegex.exec(html)) !== null) {
        // Process text before code block
        const beforeCode = html.substring(lastIndex, match.index);
        parts.push(beforeCode.replace(/\n/g, '<br>'));
        
        // Add code block
        parts.push(match[0]);
        
        lastIndex = match.index + match[0].length;
      }
      
      // Add the rest of the text
      if (lastIndex < html.length) {
        parts.push(html.substring(lastIndex).replace(/\n/g, '<br>'));
      }
      
      html = parts.join('');
      
      return html;
    }
  };
  
  window.marked = marked;
})();
